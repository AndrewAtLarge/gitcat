# -------------------------------------------------------------------------
#
# gitcat - git options supported by gitcat
#
# -------------------------------------------------------------------------
# List of the git cammands and their options that are supported by gitcat.
# This file is read by the Settings calss in gitcat and used to generate
# the gitcat command line options that call git and to set their defaults.
#
# Each section in the ini file contains the git options supported for this
# gitcat subcommand with the format chosen so as to make it easier to pass
# these options along to the add_augment mthod of an arg_parse subparser.
# Inside each ini section the lines are delimited by equals signs with either
# one ot two equals signs per line:
#     3 equal signs: option name = help = default
#     2 equal signs: extra add_augment key-value option: key = value
# This data is then given to add_augment as
#     suparser.add_augment(--<option>, help=<help>, default=<default>,
#                          dest=git_<option>, **extras)
# The first character of <option> becomes a one character shorthand for the
# option unless the first character is '*'.
#
# These options are automatically added to the corresponding git
# command by GitCat.process_options()
#
# -------------------------------------------------------------------------
# Andrew Mathas
# (c) Copyright 2018
#
# Licence
# -------
# GNU General Public License, Version 3, 29 June 2007
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License (GPL_) as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# -------------------------------------------------------------------------

[branch]
help            = List local and remote branches together with last commit message

[commit]
help            = Commit all uncommitted repositories in the catalogue
all             = automatically stage files that have been modified and deleted = False
branch          = Show the branch and tracking information = False
dry-run         = Show what would be committed without commiting = False
quiet           = Suppress commit summary message = False
verbose         = Print a unified diff for the commit = False

[diff]
help            = Print a diff of the changes in each repository
*name-only      = Show only names of changed files = False
*name-status    = Show only names and status of changed files = False
*numstat        = Show number of added and deleted lines without abbreviating = False
quiet           = List the file changes in all repositories = False
*shortstat      = Print number of modified files and number of added/deleted line = False
*summary        = Print condensed summary of changes = False

[fetch]
help            = Fetch all repositories in the catalogue
*all            = Fetch all branches = False
*dry-run        = Print what would be done without doing it = False
quiet           = Do no print messages when fetching each repository = False
force           = Fetch even if there are changes = False
prune           = Before fetching, remove any remote-tracking references that no longer exist on the remote = False
tags            = Fetch all tags from remote repositories = False

#    git    =  subparsers.add_parser(
#        'git',
#        action    =  CollectArguments,
#Run git commands on all repositories
#    )

[pull]
help            = Pull all repositories in the catalogue
*all            = Pull all branches = False
dry-run         = Print what would be done without doing it = False
*ff-only        = Fast-forward only merge = False
quiet           = Suppress messages when pulling each repository = False
*squash         = Squash the merge = False
*stat           = Show a diffstat at the end of the merge = False
tags            = Fetch all tags from remote repositories = False

# shorthands for merge strategies when pulling
strategy        = Use the given merge strategy = None
          nargs = ?
           type = str
         action = append
           dest = strategy
*recursive      = Use recursive three-way merge = False
           dest = strategy
         action = append_const
          const = recursive
*theirs         = Resolve merge conflicts favouring remote repository = False
         action = append_const
           dest = strategy
          const = theirs
*ours           = Resolve merge conflicts favouring local repository = False
         action = append_const
         const  = ours
           dest = strategy

[push]
help            = Push all repositories in the catalogue to their remote repositories
dry-run         = Do everything except actually send the updates = False
*all            = Push all branches = False
*prune          = Remove remote branches that don't have a local counterpart = False
*tags           = Push all tags = False
quiet           = Print messages each time a repository is pushed = False

[status]
help            = Print the status of each repository in the catalogue
local           = Only compare with local repositories = False
quiet           = Only list changes the repositories = False
untracked-files = Show untracked files using git status mode = no
        choices = ['no', 'normal', 'all']


